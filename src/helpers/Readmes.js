export const readmeFiles = {
    0: `<h1>The Project</h1><p> Form validation built from scratch by React. There are bunch of libraries that provides concrete solutions when it comes to validate the form. I wanted to create my very own form validation that I could later on implement in other projects if I've ever need to. After successful creation, success message will be displayed to user.</p><h1>Challenges </h1><p>In this project I've decided to display only one error message instead of display all of the errors. This was done by several if conditions. Regex is the main helper to check for matched results. If user wants to see the password has been typed, they can simply click on the icon and the password will be visible.</p><p>Live version is <a href="https://react-form-validate.netlify.app/" target="_blank">here</a> </p>`,
    1: `<h1>The Project</h1><p> This is the React version of the previously made project. I've been working on Github API for a while before I get to start with React. I've created several projects where I used fetch-post requests to create repositories and display user infos by using their API. In this project I wanted to implement same idea by using React which was a great exercise for myself.</p><p> Project consists of 5 components and app.js file. Basically on the home page there is a input field for user to search for Github usernames and also a navbar. In the navbar user can click on several programming languages and depending on the language most popular repositories of that language will be displayed.</p><p> If the search is done user is redirected to another page where information about searched user is displayed. Along with personal information detailed repository information are displayed too. On the column clicks I've made it possible to do sorting by the column. Assuming that description column is clicked, whole table will be sorted by description either ascending or descending depending on the click.</p><h1> Challenges</h1><p>To form up main structure was not really difficult for me. I'm used to play with API's and thus don't have that much trouble with it. But to handle bad requests was the tricky part. For example imagine a scenario where user types a valid username and has been directed to repository information page, if the second search is invalid than component would crash. I had to find a way to handle with these sort of small problems. As one can imagine those small ones could cause really big troubles. That's why I've tried my best to handle bad requests.</p>`,
    2: `<h1>The Project</h1><p>This project has been the introduction to react-router to me. I've learned the basics of the router and how to use it in the project. Basically, the project consists of several routes which user can decide to scroll. There is two buttons one for the menu and the other one to always direct page to home page. On click of menu button, modal window with several route options will be opened and then user can navigate through the pages.</p><p>I have used react-semantic-ui for the styles. As the content didn't really matter in this project, I've faked react-semantic-ui's page sections which made it easy for me to have a fancy styles without too much work.</p><h1>Challenges</h1><p>This was a simple project and didn't really made any trouble to me. Learning fundamentals of react-router-dom is the essential skills that I've gained along this project.</p>`,
    3: `<h1>The Project</h1> <p>This is the re-making of same project that has previously done by using Javascript by me. This time I switched the language to React to challenge myself. As I already knew a way to do exactly same thing in Javascript it was particularly challenging to step out of my comfort zone and use another language for the same purpose.</p><p> Main aim here was to generate random colors on each click of button. And I thought of a way to store colors in array and then display it on DOM as I wanted to display all the colors, not only a single one. So I stored the colors in array and removed them from there if user clicks the delete button</p><h1>Challenges</h1><p>It needs a specific logic to create a random color by using hex codes. I've invested some time on finding solution on that. Not so later I found the way of handling this specific problem. This struggle helped me quite a lot to understand the logic of HTML color codes and how they work.</p>`,
    4: `<h1>The Project</h1><p>Single page React application to create a password generator. I personally like this project a lot because of the great performance of the UI experience. I've used materialize.css in this project and they have very large api where developers can choose their styles from.</p><p>One of the main things I liked most was the range component. I've attached a listener to range component so whenever user drags the range password length will be changed accordingly. You could also create very strong password by including mix case or special characters which are completely optional for users. If user would check either of the boxes, the choice will be applied to newly generated password and will immediately check out to new one.<h1>Challenges</h1><p>At the beginning I had a though time to decide how to solve this problem. But then came up with an idea to create strings for each of the option I would like to implement and then add them dynamically to the result. I was also unsure between using Regex or writing the strings on my own then I ended up creating on my own. I finished the project in almost an hour and wanted to add more features to it. Adding a range button and allowing user to create passwords by the length of range came to my mind. I've made my research and I was able to find a range component provided my Materialize.css which I implemented in this project. I couldn't get the value of range button with props, so I have used pure Javascript features to do so.</p>`,
    5: `<h1>The Project</h1><p>React was a main framework that has been used to build user interface in this project. React-router has provided me to generate new url paths to display each product and also the navigation pages. Data is provided from separate json file and then rendered accordingly. On home page you can see first 4 highest priced products. On click of each item you will be directed to corresponding page of that individual product.</p><p>On Products page you can see whole list of products. There are buttons which enables user to sort the list of products by their price. There is also input field which provides a functionality of filtering products for user. You can simply type some keywords and then see if there are matching results from our product list.</p><h1>Challenges</h1><p> In this project I've mastered my skills on react-router. At the beginning it was a little bit tricky to generate specific url for each product but later on I figured out my own way and now its working perfectly fine. I also wanted to have next and previous buttons so user can navigate through products once they are in specific product page. To do so I came up with idea of using indexes of the products and that went perfectly well.</p>`,
    6: `<h1>The Project</h1><p> This is the project which helped me to master my skills on React. I've faked a company and created a webpage about the team members. There is a json file with a fake dummy data for each person. Simply, every person in the team represented by a card with a possibility to reach their contact data directly from the links on the card. If user wants to get more data about specific member, by clicking on the card, modal window about that specific member will be displayed. Then user can access to more information about the member.</p> <p> I've challenged myself more by dedicating specific theme for each department and then to change the theme whenever user is on modal window. So the theme of the modal window will be changing dynamically according to the department of that team member belongs to. There is also two buttons allows user to scroll through team members back and forth. Once user is on the last team member, buttons will be disabled. At last, user can either click on close text to close the modal window or simply by clicking outside of the modal.</p><h1> Challenges </h1><p>I could use a library to create a modal with already defined css but I wanted to create it on my own. This took my time a bit but also helped me to improve myself on React. Thanks to that I discovered refs and got familiar with it. To have a functionality to let user go back and forth was also challenging. Then I came up with an idea to check for the index of clicked item and then change it accordingly.</p><p>All in all, I've learnt a lot from this exercise and developed my skills on React.</p>`,
    7: `<h1>The Project </h1><p> This project has been created by using React along with Redux. Pretending that this is a e-commerce site, on landing page, there is dummy data fetched from JSON file displayed as blog posts. User is directed to specific page of the post on click of each item. Inside of details page dummy data displayed again. There is also a comment section where user can type in a name and the comment which will be added to page if submitted. Of course, user can delete the comments too.</p><p> After submit of a comment, if user goes back to homepage by clicking the icon on navigation bar, quantity of comments can be seen below specific blog details.</p><h2>Challenges </h2><p> Even though I could easily achieve the same result with React state too, I wanted to master my skills in Redux. This was already challenging to get out of my comfort zone and do something different. But I've managed to do it without too much of struggle thanks to my skills in React which helped me quite a lot along the way.</p><p> My main struggle was about how to communicate with reducer. To know which properties to spread was challenging until I figured out my own way. Another challenge was to delete the comments. It wasn't hard at all to add comments, but to delete them I had to find my way through spreading properties which was tricky.</p><p> All in all, I have learned a lot in this project. Mainly how to use Redux store and the communication among reducer and the store. Apart from that I've developed the habit of using Redux dev tools which made my life easier as well.</p>`,
    8: `<h1>The Project</h1><p>Simple weather app made by using React. As it is originally designed for mobile devices, its better to resize your window to have better UI experience. Basically, there is a single input field and as user types a city name, weather forecast of that place in that specific date will be fetched and displayed to user. I've decided to not overload the screen with too much data, that's why only the basic information about the forecast will be visible.</p><p>I've also implemented dynamically changing background. Depending on the weather, if its cold or warm or even cloudy, background image will be changed to something represents that weather.</p><h1>Challenges</h1><p>I didn't had a struggle in this project as this was a single page, basic structured application. I particularly liked the idea of changing the background image according to weather to have some dynamism in the app.</p>`
}
